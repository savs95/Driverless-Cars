package org.iiitb.es103_15.traffic;


public class Coords {
	public int x, y;
	
	public Coords(int xc, int yc) {
	}
	
	public static int distSqrd(Coords c1, Coords c2) {
	}
}

public class RoadGrid {
	// direction of travel
	public final static int NORTH = 0;
	public final static int EAST = 1;
	public final static int SOUTH = 2;
	public final static int WEST = 3;

	// left and right lanes of a road, relative to direction of travel
	public final static int LEFT = 0;
	public final static int RIGHT = 1;

	public final static int LANE_WIDTH = 20; // default size of lanes

	public RoadGrid() {
	}
	
	// convenience functions to get dir relative to curr direction
	public static int getOppDir(int dir) {
		
	}
	
	public static int getLeftDir(int dir) {
		
	}
	
	public static int getRightDir(int dir){
		
	}
	
	
	public void paint(Graphics g) {
		
	}
	
	public void add(Intersection inter){
	}
	
	public void add(Road road){
	}
	public void add(Car car){
	}

	public void startSimulation() {
	}
}


//The base class Car provides the basic functionality of a car platform - no smarts built in. The derived classes are expected to provide the intelligence of autonomy.

public class Car {

	public Car() {

	}

	// location of the mid point of the front of the car
	public final Coords getPos() {
	}

	// direction the car is pointing to
	public final int getDir() {
	}

	// road it is on
	public Road getRoad() {
	}

	// is it in the left or right lane
	public final int getLane() {
	}

	// current speed of car
	public final float getSpeed() {
	}

	// returns array of 3 values: penalties, bonus, performance
	public final int[] getScore() {
	}

	// set initial position of car.
	// Cannot be called once drive() is invoked

	public void setInitialPos(Road r, Coords loc, int dir) {
	}

	protected boolean isAccelerating() {
	}
	
	// base class methods used by derived classes to navigate the car.
	// Use getPos, getDir etc to get current
	// location of car
	// Any overriding of these methods should first invoke the super method

	// The base class updates position of the car using stored parameters
	// Expected to be invoked at short time intervals (e.g. 0.2 secs)
	// Override this to perform any intelligence during movement
	// should invoke super method first.
	protected void updatePos() {
	}

	// set acceleration rate. negative for deceleration
	// applied for specified duration (in millisecs) or until it is changed
	// stops deceleration when speed reaches 0
	// Important: duration not used anymore
	protected void accelerate(float d, int duration) {
	}

	// cross or turn in given direction
	// Should be called when exactly at intersection
	protected void crossIntersection(Intersection inter, int dir) {
	}

	// moves to the right lane in the next time step. Not yet implemented
	protected void moveRight() {
	}

	// moves to the left lane in the next time step. Not yet implemented
	protected void moveLeft() {
	}

	// customize behaviour of the subclass
	// length of car
	public int getLength() {
	}

	// display the car graphically using Swing facilities
	// default method draws a rectangle in the correct position and
	// orientation
	// You should minimally display something that makes it easy to identify the
	// car
	public void paint(Graphics g) {
		
	}

	// main method to start navigation of the car. Called once.
	// should be called by derived methods
	public void drive() {
	}

}	


public class Intersection {
	
	public Intersection(int x, int y) {
	}
	
	public Intersection(Coords coords) {
	}
	
	 // position of the center of the intersection on the global grid
	public Coords getCoords() {
	}
	
		
	// find the four roads connecting at the intersection. 
	// One or more of the entries could be null.
	// The order corresponds to roads going N, E, S, W
	public Road[] getRoads() {
	} 
	
	public Road getRoad(int dir) {
	}
	
	public void setTrafficControl(TrafficControl tc){
	}
	
	// signal/sign at the intersection - null if there is none
	public TrafficControl getTrafficControl() {
	} 

	// override these to improve quality of traffic information at intersections
	// (in phase 2)
	// if there is already a vehicle in the intersection
	public boolean isOccupied() {
	} 

	// if the road from dir is clear for at least dist units
	public boolean isClear(int dir, int dist) {
	} 

	
	
	public void startSimulation() {
	}
	
	void paint(Graphics g) {
	}
}



public class Road {
		
	public Road(int dir, Intersection start, Intersection end){
	}
	
	// always specified as N start and S end (or) W start and E end
	// and direction as SOUTH or EAST
	public Road(int dir, Intersection start, Intersection end, boolean entryStart, boolean entryEnd){
	}
	
	public void setSpeedLimit(int limit) {
	}
	// returns SOUTH (meaning N-S road) or EAST (meaning W-E road)
	public int getDir() {
		
	} 

	// returns reference to start and end Intersections
	public Intersection getStartIntersection() {
	} 

	public Intersection getEndIntersection() {
	}
	
	// if entry is allowed in desired direction.
	// false implies no entry
	public boolean entryAllowed(int dir) {
		
	}

	// speed limit for current road
	public int getSpeedLimit() {
	} 

	void paint(Graphics g) {
	}
}

package org.iiitb.es103_15.traffic;


public class TestCar extends Car {	
	public TestCar() {
		
	}

	public void setInitialPos(Road r, Coords loc, int dir) {
	}
	
	
	// called at regular intervals. Do any processing here
	protected void updatePos() {
	}
		

	

	public void drive() {
	
	}
	
}

public abstract class TrafficControl {
	public final static int SIGNAL_LIGHT = 0;
	public final static int STOP_SIGN = 1;
	
	// the type of the control, as above
	public abstract int getType();
	
	public void paint(Graphics g) {
		
	}
}

public class StopSign extends TrafficControl {

	public int getType() {
		return STOP_SIGN;
	}

	// not yet implemented	
	public Car getFirst() {
		return null;
	} 

}

public class TrafficSignal extends TrafficControl {

	public final static int RED_LIGHT = 0;
	public final static int GREEN_LIGHT = 1;

	
	public TrafficSignal(Intersection inter, int delay) // delay between signal changes in milisecs
	{
	}
	
	public Intersection getIntersection() {
	}
	
	public int getType() {
		return SIGNAL_LIGHT;
	}
	
	
	// for intersections with SIGNAL_LIGHTS, returns
	// status of signal in a given direction.
	// RED_LIGHT or GREEN_LIGHT
	// Recommended to use listeners instead of directly checking
	// for signal state
	
	public int getSignalState(int dir) {
	}

	public void startSimulation() {
	}
	
	public void paint(Graphics g) {
	}

	// observes a traffic signal at an intersection
	public interface SignalListener {	 

		public void onChanged(int currState); // called with new state of signal light (RED_LIGHT or GREEN_LIGHT
	
	}

	public void addListener(SignalListener listener, int dir) {
		
	}

	public void removeListener(SignalListener listener, int dir) {
	}
}
